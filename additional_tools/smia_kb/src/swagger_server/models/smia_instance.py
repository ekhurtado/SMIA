# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict  # noqa: F401

from swagger_server import util
from swagger_server.models.asset import Asset  # noqa: F401,E501
from swagger_server.models.base_model_ import Model
from swagger_server.models.datatypes import ReferenceSMIA, ReferenceAAS  # noqa: F401,E501


class SMIAinstance(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: ReferenceSMIA=None, asset: Asset=None, aas_id: ReferenceAAS=None, status: str=None, started_time_stamp: int=None, smia_version: str=None):  # noqa: E501
        """SMIAinstance - a model defined in Swagger

        :param id: The id of this SMIAinstance.  # noqa: E501
        :type id: ReferenceSMIA
        :param asset: The asset of this SMIAinstance.  # noqa: E501
        :type asset: Asset
        :param aas_id: The aas_id of this SMIAinstance.  # noqa: E501
        :type aas_id: ReferenceAAS
        :param status: The status of this SMIAinstance.  # noqa: E501
        :type status: str
        :param started_time_stamp: The started_time_stamp of this SMIAinstance.  # noqa: E501
        :type started_time_stamp: int
        :param smia_version: The smia_version of this SMIAinstance.  # noqa: E501
        :type smia_version: str
        """
        self.swagger_types = {
            'id': ReferenceSMIA,
            'asset': Asset,
            'aas_id': ReferenceAAS,
            'status': str,
            'started_time_stamp': int,
            'smia_version': str
        }

        self.attribute_map = {
            'id': 'id',
            'asset': 'asset',
            'aas_id': 'aasID',
            'status': 'status',
            'started_time_stamp': 'startedTimeStamp',
            'smia_version': 'smiaVersion'
        }
        self._id = id
        self._asset = asset
        self._aas_id = aas_id
        self._status = status
        self._started_time_stamp = started_time_stamp
        self._smia_version = smia_version

    @classmethod
    def from_dict(cls, dikt) -> 'SMIAinstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SMIAinstance of this SMIAinstance.  # noqa: E501
        :rtype: SMIAinstance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> ReferenceSMIA:
        """Gets the id of this SMIAinstance.


        :return: The id of this SMIAinstance.
        :rtype: ReferenceSMIA
        """
        return self._id

    @id.setter
    def id(self, id: ReferenceSMIA):
        """Sets the id of this SMIAinstance.


        :param id: The id of this SMIAinstance.
        :type id: ReferenceSMIA
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def asset(self) -> Asset:
        """Gets the asset of this SMIAinstance.


        :return: The asset of this SMIAinstance.
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset: Asset):
        """Sets the asset of this SMIAinstance.


        :param asset: The asset of this SMIAinstance.
        :type asset: Asset
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def aas_id(self) -> ReferenceAAS:
        """Gets the aas_id of this SMIAinstance.


        :return: The aas_id of this SMIAinstance.
        :rtype: ReferenceAAS
        """
        return self._aas_id

    @aas_id.setter
    def aas_id(self, aas_id: ReferenceAAS):
        """Sets the aas_id of this SMIAinstance.


        :param aas_id: The aas_id of this SMIAinstance.
        :type aas_id: ReferenceAAS
        """
        if aas_id is None:
            raise ValueError("Invalid value for `aas_id`, must not be `None`")  # noqa: E501

        self._aas_id = aas_id

    @property
    def status(self) -> str:
        """Gets the status of this SMIAinstance.


        :return: The status of this SMIAinstance.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this SMIAinstance.


        :param status: The status of this SMIAinstance.
        :type status: str
        """

        self._status = status

    @property
    def started_time_stamp(self) -> int:
        """Gets the started_time_stamp of this SMIAinstance.


        :return: The started_time_stamp of this SMIAinstance.
        :rtype: int
        """
        return self._started_time_stamp

    @started_time_stamp.setter
    def started_time_stamp(self, started_time_stamp: int):
        """Sets the started_time_stamp of this SMIAinstance.


        :param started_time_stamp: The started_time_stamp of this SMIAinstance.
        :type started_time_stamp: int
        """

        self._started_time_stamp = started_time_stamp

    @property
    def smia_version(self) -> str:
        """Gets the smia_version of this SMIAinstance.


        :return: The smia_version of this SMIAinstance.
        :rtype: str
        """
        return self._smia_version

    @smia_version.setter
    def smia_version(self, smia_version: str):
        """Sets the smia_version of this SMIAinstance.


        :param smia_version: The smia_version of this SMIAinstance.
        :type smia_version: str
        """

        self._smia_version = smia_version


    # Methods required to be part of a set(): for SMIA database
    def __hash__(self):
        return hash(self._id)   # The id of the SMIA instance will be unique, so it will be used

    def __eq__(self, other):
        if not isinstance(other, SMIAinstance):
            return False
        return self._id == other._id

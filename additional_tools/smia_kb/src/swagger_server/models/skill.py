# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict, Any  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.datatypes import ReferenceIRI  # noqa: F401,E501
from swagger_server.models.skill_parameter import SkillParameter  # noqa: F401,E501


class Skill(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, iri: ReferenceIRI=None, name: str=None, accessible_through: List[ReferenceIRI]=None, has_parameter: List[SkillParameter]=None, has_implementation_type: str=None):  # noqa: E501
        """Skill - a model defined in Swagger

        :param iri: The iri of this Skill.  # noqa: E501
        :type iri: ReferenceIRI
        :param name: The name of this Skill.  # noqa: E501
        :type name: str
        :param accessible_through: The accessible_through of this Skill.  # noqa: E501
        :type accessible_through: List[ReferenceIRI]
        :param has_parameter: The has_parameter of this Skill.  # noqa: E501
        :type has_parameter: List[SkillParameter]
        :param has_implementation_type: The has_implementation_type of this Skill.  # noqa: E501
        :type has_implementation_type: str
        """
        self.swagger_types = {
            'iri': ReferenceIRI,
            'name': str,
            'accessible_through': List[ReferenceIRI],
            'has_parameter': List[SkillParameter],
            'has_implementation_type': str
        }

        self.attribute_map = {
            'iri': 'iri',
            'name': 'name',
            'accessible_through': 'accessibleThrough',
            'has_parameter': 'hasParameter',
            'has_implementation_type': 'hasImplementationType'
        }
        self._iri = iri
        self._name = name
        self._accessible_through = accessible_through
        self._has_parameter = has_parameter
        self._has_implementation_type = has_implementation_type

    @classmethod
    def from_dict(cls, dikt) -> 'Skill':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Skill of this Skill.  # noqa: E501
        :rtype: Skill
        """
        return util.deserialize_model(dikt, cls)

    @classmethod
    def from_ontology_instance_to_json(cls, ontology_instance) -> dict[str, str | Any] | None:
        """Transforms an ontological instance into a dict

        :param ontology_instance: An ontology instance.
        :type: owlready2.ThingClass
        :return: The JSON of this Skill.
        :rtype: dict
        """
        skill_instance = Skill()
        skill_json = {}
        for attrib in skill_instance.attribute_map.values():
            try:
                if attrib == 'accessibleThrough':
                    attribs = ['accessibleThrough', 'accessibleThroughAssetService', 'accessibleThroughAgentService']
                    ontology_value = [
                        instance.iri
                        for attr in attribs
                        if hasattr(ontology_instance, attr) for instance in getattr(ontology_instance, attr)
                    ]
                elif attrib == 'hasParameter':
                    ontology_value = [
                        SkillParameter.from_ontology_instance_to_json(skill_parameter_instance)
                        for skill_parameter_instance in getattr(ontology_instance, attrib)
                    ]
                else:
                    ontology_value = getattr(ontology_instance, attrib)
                    if isinstance(ontology_value, list):
                        # Si se ha definido un DataProperty puede que venga en tipo lista, hay que pasarlo a string
                        if len(ontology_value) > 0:
                            ontology_value = ontology_value[0]
                        else:
                            ontology_value = []
                skill_json[attrib] = ontology_value
            except AttributeError:
                print("ERROR: The attribute {} does not exist in the ontology instance {}.".format(attrib,
                                                                                                   ontology_instance))
        return skill_json

    @property
    def iri(self) -> ReferenceIRI:
        """Gets the iri of this Skill.


        :return: The iri of this Skill.
        :rtype: ReferenceIRI
        """
        return self._iri

    @iri.setter
    def iri(self, iri: ReferenceIRI):
        """Sets the iri of this Skill.


        :param iri: The iri of this Skill.
        :type iri: ReferenceIRI
        """
        if iri is None:
            raise ValueError("Invalid value for `iri`, must not be `None`")  # noqa: E501

        self._iri = iri

    @property
    def name(self) -> str:
        """Gets the name of this Skill.


        :return: The name of this Skill.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Skill.


        :param name: The name of this Skill.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def accessible_through(self) -> List[ReferenceIRI]:
        """Gets the accessible_through of this Skill.

        Through which skill interfaces is the capability accessible.  # noqa: E501

        :return: The accessible_through of this Skill.
        :rtype: List[ReferenceIRI]
        """
        return self._accessible_through

    @accessible_through.setter
    def accessible_through(self, accessible_through: List[ReferenceIRI]):
        """Sets the accessible_through of this Skill.

        Through which skill interfaces is the capability accessible.  # noqa: E501

        :param accessible_through: The accessible_through of this Skill.
        :type accessible_through: List[ReferenceIRI]
        """

        self._accessible_through = accessible_through

    @property
    def has_parameter(self) -> List[SkillParameter]:
        """Gets the has_parameter of this Skill.

        The associated skill parameters.  # noqa: E501

        :return: The has_parameter of this Skill.
        :rtype: List[SkillParameter]
        """
        return self._has_parameter

    @has_parameter.setter
    def has_parameter(self, has_parameter: List[SkillParameter]):
        """Sets the has_parameter of this Skill.

        The associated skill parameters.  # noqa: E501

        :param has_parameter: The has_parameter of this Skill.
        :type has_parameter: List[SkillParameter]
        """

        self._has_parameter = has_parameter

    @property
    def has_implementation_type(self) -> str:
        """Gets the has_implementation_type of this Skill.

        The implementation type of the skill: OPERATION, GUI_BEHAVIOUR...  # noqa: E501

        :return: The has_implementation_type of this Skill.
        :rtype: str
        """
        return self._has_implementation_type

    @has_implementation_type.setter
    def has_implementation_type(self, has_implementation_type: str):
        """Sets the has_implementation_type of this Skill.

        The implementation type of the skill: OPERATION, GUI_BEHAVIOUR...  # noqa: E501

        :param has_implementation_type: The has_implementation_type of this Skill.
        :type has_implementation_type: str
        """

        self._has_implementation_type = has_implementation_type

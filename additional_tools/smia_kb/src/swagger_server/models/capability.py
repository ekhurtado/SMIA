# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict, Any  # noqa: F401

from swagger_server.css_smia_ontology.css_ontology_utils import CapabilitySkillOntologyInfo
from swagger_server.models import Asset
from swagger_server.models.base_model_ import Model
from swagger_server.models.capability_constraint import CapabilityConstraint  # noqa: F401,E501
from swagger_server.models.datatypes import ReferenceIRI  # noqa: F401,E501
from swagger_server import util


class Capability(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, iri: ReferenceIRI=None, name: str=None, category: str=None, has_lifecycle: str=None, is_realized_by: List[ReferenceIRI]=None, assets: List[Asset]=None, is_restricted_by: List[CapabilityConstraint]=None):  # noqa: E501
        """Capability - a model defined in Swagger

        :param iri: The iri of this Capability.  # noqa: E501
        :type iri: ReferenceIRI
        :param name: The name of this Capability.  # noqa: E501
        :type name: str
        :param category: The category of this Capability.  # noqa: E501
        :type category: str
        :param has_lifecycle: The has_lifecycle of this Capability.  # noqa: E501
        :type has_lifecycle: str
        :param is_realized_by: The is_realized_by of this Capability.  # noqa: E501
        :type is_realized_by: List[ReferenceIRI]
        :param assets: The assets of this Capability.  # noqa: E501
        :type assets: List[Asset]
        :param is_restricted_by: The is_restricted_by of this Capability.  # noqa: E501
        :type is_restricted_by: List[CapabilityConstraint]
        """
        self.swagger_types = {
            'iri': ReferenceIRI,
            'name': str,
            'category': str,
            'has_lifecycle': str,
            'is_realized_by': List[ReferenceIRI],
            'assets': List[Asset],
            'is_restricted_by': List[CapabilityConstraint]
        }

        self.attribute_map = {
            'iri': 'iri',
            'name': 'name',
            'category': 'category',
            'has_lifecycle': 'hasLifecycle',
            'is_realized_by': 'isRealizedBy',
            'assets': 'assets',
            'is_restricted_by': 'isRestrictedBy'
        }
        self._iri = iri
        self._name = name
        self._category = category
        self._has_lifecycle = has_lifecycle
        self._is_realized_by = is_realized_by
        self._assets = assets
        self._is_restricted_by = is_restricted_by

    @classmethod
    def from_dict(cls, dikt) -> 'Capability':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Capability of this Capability.  # noqa: E501
        :rtype: Capability
        """
        return util.deserialize_model(dikt, cls)

    @classmethod
    def from_ontology_instance_to_json(cls, ontology_instance) -> dict[str, str | Any] | None:
        """Transforms an ontological instance into a dict

        :param ontology_instance: An ontology instance.
        :type: owlready2.ThingClass
        :return: The JSON of this Capability.
        :rtype: dict
        """
        capability_instance = Capability()
        capability_json = {}
        for attrib in capability_instance.attribute_map.values():
            try:
                if attrib == 'isRealizedBy':
                    ontology_value = [
                        instance.iri
                        for instance in getattr(ontology_instance, attrib)
                    ]
                elif attrib == 'isRestrictedBy':
                    ontology_value = [
                        CapabilityConstraint.from_ontology_instance_to_json(constraint_instance)
                        for constraint_instance in getattr(ontology_instance, attrib)
                    ]
                elif attrib == 'category':
                    if CapabilitySkillOntologyInfo.CSS_ONTOLOGY_ASSET_CAPABILITY_IRI in ontology_instance.is_a[0].iri:
                        ontology_value = 'AssetCapability'
                    elif CapabilitySkillOntologyInfo.CSS_ONTOLOGY_AGENT_CAPABILITY_IRI in ontology_instance.is_a[0].iri:
                        ontology_value = 'AgentCapability'
                elif attrib == 'assets':
                    ontology_value = [
                        Asset.from_ontology_instance_data_to_json(asset_id, asset_info)
                        for asset_id, asset_info in getattr(ontology_instance, attrib).items()
                    ]
                else:
                    ontology_value = getattr(ontology_instance, attrib)
                capability_json[attrib] = ontology_value
            except AttributeError:
                print("ERROR: The attribute {} does not exist in the ontology instance {}.".format(attrib, ontology_instance))
        return capability_json


    @property
    def iri(self) -> ReferenceIRI:
        """Gets the iri of this Capability.


        :return: The iri of this Capability.
        :rtype: ReferenceIRI
        """
        return self._iri

    @iri.setter
    def iri(self, iri: ReferenceIRI):
        """Sets the iri of this Capability.


        :param iri: The iri of this Capability.
        :type iri: ReferenceIRI
        """
        if iri is None:
            raise ValueError("Invalid value for `iri`, must not be `None`")  # noqa: E501

        self._iri = iri

    @property
    def name(self) -> str:
        """Gets the name of this Capability.


        :return: The name of this Capability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Capability.


        :param name: The name of this Capability.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category(self) -> str:
        """Gets the category of this Capability.


        :return: The category of this Capability.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Capability.


        :param category: The category of this Capability.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def has_lifecycle(self) -> str:
        """Gets the has_lifecycle of this Capability.

        The lifecycle of the capability.  # noqa: E501

        :return: The has_lifecycle of this Capability.
        :rtype: str
        """
        return self._has_lifecycle

    @has_lifecycle.setter
    def has_lifecycle(self, has_lifecycle: str):
        """Sets the has_lifecycle of this Capability.

        The lifecycle of the capability.  # noqa: E501

        :param has_lifecycle: The has_lifecycle of this Capability.
        :type has_lifecycle: str
        """
        if has_lifecycle is None:
            raise ValueError("Invalid value for `has_lifecycle`, must not be `None`")  # noqa: E501

        self._has_lifecycle = has_lifecycle

    @property
    def is_realized_by(self) -> List[ReferenceIRI]:
        """Gets the is_realized_by of this Capability.

        By which skills is the capability realized.  # noqa: E501

        :return: The is_realized_by of this Capability.
        :rtype: List[ReferenceIRI]
        """
        return self._is_realized_by

    @is_realized_by.setter
    def is_realized_by(self, is_realized_by: List[ReferenceIRI]):
        """Sets the is_realized_by of this Capability.

        By which skills is the capability realized.  # noqa: E501

        :param is_realized_by: The is_realized_by of this Capability.
        :type is_realized_by: List[ReferenceIRI]
        """
        if is_realized_by is None:
            raise ValueError("Invalid value for `is_realized_by`, must not be `None`")  # noqa: E501

        self._is_realized_by = is_realized_by

    @property
    def is_restricted_by(self) -> List[CapabilityConstraint]:
        """Gets the is_restricted_by of this Capability.

        By which constraints is the capability restricted.  # noqa: E501

        :return: The is_restricted_by of this Capability.
        :rtype: List[CapabilityConstraint]
        """
        return self._is_restricted_by

    @is_restricted_by.setter
    def is_restricted_by(self, is_restricted_by: List[CapabilityConstraint]):
        """Sets the is_restricted_by of this Capability.

        By which constraints is the capability restricted.  # noqa: E501

        :param is_restricted_by: The is_restricted_by of this Capability.
        :type is_restricted_by: List[CapabilityConstraint]
        """

        self._is_restricted_by = is_restricted_by

    @property
    def assets(self) -> List[Asset]:
        """Gets the assets of this Capability.

        Which assets can perform this capability.  # noqa: E501

        :return: The assets of this Capability.
        :rtype: List[Asset]
        """
        return self._assets


    @assets.setter
    def assets(self, assets: List[Asset]):
        """Sets the assets of this Capability.

        Which assets can perform this capability.  # noqa: E501

        :param assets: The assets of this Capability.
        :type assets: List[Asset]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501

        self._assets = assets
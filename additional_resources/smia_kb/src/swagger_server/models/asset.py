# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict, Any  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.datatypes import ReferenceAAS  # noqa: F401,E501
from swagger_server import util


class Asset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, kind: str=None, type: ReferenceAAS=None):  # noqa: E501
        """Asset - a model defined in Swagger

        :param id: The id of this Asset.  # noqa: E501
        :type id: str
        :param kind: The kind of this Asset.  # noqa: E501
        :type kind: str
        :param type: The type of this Asset.  # noqa: E501
        :type type: ReferenceAAS
        """
        self.swagger_types = {
            'id': str,
            'kind': str,
            'type': ReferenceAAS
        }

        self.attribute_map = {
            'id': 'id',
            'kind': 'kind',
            'type': 'type'
        }
        self._id = id
        self._kind = kind
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Asset of this Asset.  # noqa: E501
        :rtype: Asset
        """
        return util.deserialize_model(dikt, cls)

    @classmethod
    def from_ontology_instance_data_to_json(cls, asset_id, asset_info) -> dict[str, str | Any] | None:
        """Transforms an ontological instance data of an asset associated to a Capability into a dict

        :param asset_id: The identifier of the asset.
        :type: str
        :param asset_info: The information of the asset.
        :type: dict
        :return: The JSON of this Capability.
        :rtype: dict
        """
        return {
            'asset_id': asset_id,
            'kind': asset_info['kind'],
            'type': asset_info['type']
        }

    @property
    def id(self) -> str:
        """Gets the id of this Asset.


        :return: The id of this Asset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Asset.


        :param id: The id of this Asset.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kind(self) -> str:
        """Gets the kind of this Asset.

        The kind of the asset.  # noqa: E501

        :return: The kind of this Asset.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this Asset.

        The kind of the asset.  # noqa: E501

        :param kind: The kind of this Asset.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def type(self) -> ReferenceAAS:
        """Gets the type of this Asset.


        :return: The type of this Asset.
        :rtype: ReferenceAAS
        """
        return self._type

    @type.setter
    def type(self, type: ReferenceAAS):
        """Sets the type of this Asset.


        :param type: The type of this Asset.
        :type type: ReferenceAAS
        """

        self._type = type

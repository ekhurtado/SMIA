# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict, Any  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.datatypes import ReferenceIRI  # noqa: F401,E501
from swagger_server import util

# TODO COPIAR AL REPOSITORIO DE SMIA !!

class SkillParameter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, iri: ReferenceIRI=None, name: str=None, has_type: str=None):  # noqa: E501
        """SkillParameter - a model defined in Swagger

        :param iri: The iri of this SkillParameter.  # noqa: E501
        :type iri: ReferenceIRI
        :param name: The name of this SkillParameter.  # noqa: E501
        :type name: str
        :param has_type: The has_type of this SkillParameter.  # noqa: E501
        :type has_type: str
        """
        self.swagger_types = {
            'iri': ReferenceIRI,
            'name': str,
            'has_type': str
        }

        self.attribute_map = {
            'iri': 'iri',
            'name': 'name',
            'has_type': 'hasType'
        }
        self._iri = iri
        self._name = name
        self._has_type = has_type

    @classmethod
    def from_dict(cls, dikt) -> 'SkillParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SkillParameter of this SkillParameter.  # noqa: E501
        :rtype: SkillParameter
        """
        return util.deserialize_model(dikt, cls)

    @classmethod
    def from_ontology_instance_to_json(cls, ontology_instance) -> dict[str, str | Any] | None:
        """Transforms an ontological instance into a dict

        :param ontology_instance: An ontology instance.
        :type: owlready2.ThingClass
        :return: The JSON of this SkillParameter.
        :rtype: dict
        """
        skill_parameter_instance = SkillParameter()
        skill_parameter_json = {}
        for attrib in skill_parameter_instance.attribute_map.values():
            try:
                ontology_value = getattr(ontology_instance, attrib)
                if isinstance(ontology_value, list):
                    # Si se ha definido un DataProperty puede que venga en tipo lista, hay que pasarlo a string
                    ontology_value = ontology_value[0]
                skill_parameter_json[attrib] = ontology_value
            except AttributeError:
                print("ERROR: The attribute {} does not exist in the ontology instance {}.".format(attrib,
                                                                                                   ontology_instance))
        return skill_parameter_json

    @property
    def iri(self) -> ReferenceIRI:
        """Gets the iri of this SkillParameter.


        :return: The iri of this SkillParameter.
        :rtype: ReferenceIRI
        """
        return self._iri

    @iri.setter
    def iri(self, iri: ReferenceIRI):
        """Sets the iri of this SkillParameter.


        :param iri: The iri of this SkillParameter.
        :type iri: ReferenceIRI
        """
        if iri is None:
            raise ValueError("Invalid value for `iri`, must not be `None`")  # noqa: E501

        self._iri = iri

    @property
    def name(self) -> str:
        """Gets the name of this SkillParameter.


        :return: The name of this SkillParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SkillParameter.


        :param name: The name of this SkillParameter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def has_type(self) -> str:
        """Gets the has_type of this SkillParameter.

        The type of the Skill Parameter.  # noqa: E501

        :return: The has_type of this SkillParameter.
        :rtype: str
        """
        return self._has_type

    @has_type.setter
    def has_type(self, has_type: str):
        """Sets the has_type of this SkillParameter.

        The type of the Skill Parameter.  # noqa: E501

        :param has_type: The has_type of this SkillParameter.
        :type has_type: str
        """
        if has_type is None:
            raise ValueError("Invalid value for `has_type`, must not be `None`")  # noqa: E501

        self._has_type = has_type

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.datatypes import ReferenceIRI  # noqa: F401,E501
from swagger_server import util


class CapabilityConstraint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, iri: ReferenceIRI=None, name: str=None, has_condition: str=None):  # noqa: E501
        """CapabilityConstraint - a model defined in Swagger

        :param iri: The iri of this CapabilityConstraint.  # noqa: E501
        :type iri: ReferenceIRI
        :param name: The name of this CapabilityConstraint.  # noqa: E501
        :type name: str
        :param has_condition: The has_condition of this CapabilityConstraint.  # noqa: E501
        :type has_condition: str
        """
        self.swagger_types = {
            'iri': ReferenceIRI,
            'name': str,
            'has_condition': str
        }

        self.attribute_map = {
            'iri': 'iri',
            'name': 'name',
            'has_condition': 'hasCondition'
        }
        self._iri = iri
        self._name = name
        self._has_condition = has_condition

    @classmethod
    def from_dict(cls, dikt) -> 'CapabilityConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapabilityConstraint of this CapabilityConstraint.  # noqa: E501
        :rtype: CapabilityConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iri(self) -> ReferenceIRI:
        """Gets the iri of this CapabilityConstraint.


        :return: The iri of this CapabilityConstraint.
        :rtype: ReferenceIRI
        """
        return self._iri

    @iri.setter
    def iri(self, iri: ReferenceIRI):
        """Sets the iri of this CapabilityConstraint.


        :param iri: The iri of this CapabilityConstraint.
        :type iri: ReferenceIRI
        """
        if iri is None:
            raise ValueError("Invalid value for `iri`, must not be `None`")  # noqa: E501

        self._iri = iri

    @property
    def name(self) -> str:
        """Gets the name of this CapabilityConstraint.


        :return: The name of this CapabilityConstraint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CapabilityConstraint.


        :param name: The name of this CapabilityConstraint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def has_condition(self) -> str:
        """Gets the has_condition of this CapabilityConstraint.

        The condition of the Capability Constraint.  # noqa: E501

        :return: The has_condition of this CapabilityConstraint.
        :rtype: str
        """
        return self._has_condition

    @has_condition.setter
    def has_condition(self, has_condition: str):
        """Sets the has_condition of this CapabilityConstraint.

        The condition of the Capability Constraint.  # noqa: E501

        :param has_condition: The has_condition of this CapabilityConstraint.
        :type has_condition: str
        """
        if has_condition is None:
            raise ValueError("Invalid value for `has_condition`, must not be `None`")  # noqa: E501

        self._has_condition = has_condition
